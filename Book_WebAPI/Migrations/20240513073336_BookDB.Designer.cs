// <auto-generated />
using System;
using Book_WebAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Book_WebAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240513073336_BookDB")]
    partial class BookDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Book_WebAPI.Models.Domain.Author", b =>
                {
                    b.Property<int>("AuthorID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AuthorID"));

                    b.Property<string>("AuthorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuthorID");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            AuthorID = 1,
                            AuthorName = "Phat"
                        },
                        new
                        {
                            AuthorID = 2,
                            AuthorName = "Dat"
                        },
                        new
                        {
                            AuthorID = 3,
                            AuthorName = "Linh"
                        });
                });

            modelBuilder.Entity("Book_WebAPI.Models.Domain.Book", b =>
                {
                    b.Property<int>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookId"));

                    b.Property<string>("CoverUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("PublisherID")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookId");

                    b.HasIndex("PublisherID");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            BookId = 1,
                            CoverUrl = "https://nxbhcm.com.vn/Image/Biasach/dacnhantam86.jpg",
                            DateAdded = new DateTime(2024, 5, 13, 14, 33, 36, 283, DateTimeKind.Local).AddTicks(266),
                            Description = "trending book",
                            Genre = 1,
                            IsRead = true,
                            PublisherID = 1,
                            Rate = 10,
                            Title = "Dark Nhan Tamn"
                        },
                        new
                        {
                            BookId = 2,
                            CoverUrl = "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcReihuPgO3ty4cK9ePdAuMETwnAReeBLhEFNObJQCnDnmhqeEP9",
                            DateAdded = new DateTime(2024, 5, 13, 14, 33, 36, 283, DateTimeKind.Local).AddTicks(301),
                            Description = "MVC",
                            Genre = 2,
                            IsRead = true,
                            PublisherID = 2,
                            Rate = 10,
                            Title = "Lập trình Web MVC"
                        },
                        new
                        {
                            BookId = 3,
                            CoverUrl = "https://m.media-amazon.com/images/I/51OV+q4yBkS._AC_UF1000,1000_QL80_DpWeblab_.jpg",
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "oop",
                            Genre = 1,
                            IsRead = true,
                            PublisherID = 3,
                            Rate = 10,
                            Title = "Hướng đối tượng (OOP)"
                        });
                });

            modelBuilder.Entity("Book_WebAPI.Models.Domain.BookAuthor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("BookId");

                    b.ToTable("BookAuthors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            BookId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            BookId = 1
                        });
                });

            modelBuilder.Entity("Book_WebAPI.Models.Domain.Publisher", b =>
                {
                    b.Property<int>("PublisherId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PublisherId"));

                    b.Property<string>("PublisherName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PublisherId");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            PublisherId = 1,
                            PublisherName = "Adam"
                        },
                        new
                        {
                            PublisherId = 2,
                            PublisherName = "Eva"
                        },
                        new
                        {
                            PublisherId = 3,
                            PublisherName = "Smith"
                        });
                });

            modelBuilder.Entity("Book_WebAPI.Models.Domain.Book", b =>
                {
                    b.HasOne("Book_WebAPI.Models.Domain.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Book_WebAPI.Models.Domain.BookAuthor", b =>
                {
                    b.HasOne("Book_WebAPI.Models.Domain.Author", "Author")
                        .WithMany("BookAuthors")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Book_WebAPI.Models.Domain.Book", "Book")
                        .WithMany("BookAuthors")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Book");
                });

            modelBuilder.Entity("Book_WebAPI.Models.Domain.Author", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Book_WebAPI.Models.Domain.Book", b =>
                {
                    b.Navigation("BookAuthors");
                });

            modelBuilder.Entity("Book_WebAPI.Models.Domain.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
